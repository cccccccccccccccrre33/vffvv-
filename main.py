import os, requests, asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

TOKEN = os.getenv("TOKEN")            # TOKEN –≤ Secrets

# ---------- utils ----------
def fmt_price(p):
    if p >= 1:      return f"{p:,.2f}"
    elif p >= 0.01: return f"{p:,.4f}"
    return f"{p:,.6f}"

def pct(x): return f"{x:+.2f}%"

# ---------- price parsers (spot USDT‚Äë–ø–∞—Ä—ã) ----------
def b24_binance():
    j = requests.get("https://api.binance.com/api/v3/ticker/24hr", timeout=5).json()
    return {d["symbol"][:-4]: (float(d["lastPrice"]), float(d["priceChangePercent"]))
            for d in j if d["symbol"].endswith("USDT")}

def b24_bybit():
    j = requests.get("https://api.bybit.com/v2/public/tickers", timeout=5).json()["result"]
    return {d["symbol"][:-5]: (float(d["last_price"]), float(d["price_24h_pcnt"])*100)
            for d in j if d["symbol"].endswith("USDT")}

def b24_mexc():
    j = requests.get("https://api.mexc.com/api/v3/ticker/24hr", timeout=5).json()
    return {d["symbol"][:-4]: (float(d["lastPrice"]), float(d["priceChangePercent"]))
            for d in j if d["symbol"].endswith("USDT")}

def b24_bingx():
    j = requests.get("https://api.bingx.com/api/v1/market/getAllTickers", timeout=5).json()["data"]
    return {d["symbol"][:-4].upper(): (float(d["lastPrice"]), float(d["priceChangePercent"]))
            for d in j if d["symbol"].endswith("USDT")}

def b24_okx():
    j = requests.get("https://www.okx.com/api/v5/market/tickers?instType=SPOT", timeout=5).json()["data"]
    out = {}
    for d in j:
        if d["instId"].endswith("-USDT"):
            coin = d["instId"][:-5]
            last, open_24h = float(d["last"]), float(d["open24h"])
            pct24 = (last - open_24h) / open_24h * 100 if open_24h else 0
            out[coin] = (last, pct24)
    return out

EX_FUNCS = [b24_binance, b24_bybit, b24_mexc, b24_bingx, b24_okx]

async def unified_24h():
    coins = {}
    for fn in EX_FUNCS:
        try:
            data = await asyncio.to_thread(fn)
            for k, v in data.items():
                if k not in coins:          # –±–µ—Ä—ë–º –ø–µ—Ä–≤–æ–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    coins[k] = v
        except: pass
    return coins

async def get_price_single(coin):
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º unified, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å HTTP
    data = await unified_24h()
    return data.get(coin.upper())

# ---------- —Ç–µ–∫—Å—Ç—ã ----------
TXT = {
    "ru": dict(
        start=(
            "üî• Crypto Bot ‚Äî –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫—É\n\n"
            "üìå –ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã\n"
            "‚Ä¢ /price ‚Äî –º–≥–Ω–æ–≤–µ–Ω–Ω–æ: BTC ETH SOL\n"
            "‚Ä¢ /price btc ada doge ‚Äî —Ü–µ–Ω—ã –ª—é–±—ã—Ö –º–æ–Ω–µ—Ç\n"
            "‚Ä¢ /top ‚Äî —Ç–æ–ø 5 —Ä–æ—Å—Ç / –ø–∞–¥–µ–Ω–∏–µ (24—á)\n\n"
            "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ\n"
            "‚Ä¢ /fav ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫\n"
            "‚Ä¢ /fav_add btc ada ‚Äî –¥–æ–±–∞–≤–∏—Ç—å\n"
            "‚Ä¢ /fav_remove btc ‚Äî —É–¥–∞–ª–∏—Ç—å\n\n"
            "üîó –°–µ—Ä–≤–∏—Å—ã\n"
            "‚Ä¢ <a href=\"https://www.binance.com/activity/referral-entry/CPA?ref=CPA_00POHWMMJK\">Binance</a>\n"
            "‚Ä¢ <a href=\"https://www.bybit.com/invite?ref=A5Y25JQ\">Bybit</a>\n"
            "‚Ä¢ <a href=\"https://promote.mexc.com/r/XzfzE6vM\">MEXC</a>\n"
            "‚Ä¢ <a href=\"https://bingx.com/invite/XQIWQZ/\">BingX</a>\n"
            "‚Ä¢ <a href=\"https://okx.com/join/33545594\">OKX</a>"
        ),
        hdr="üí∞ –¶–µ–Ω—ã:", none="‚ùå –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
        fav_empty="‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç.",
        top_gain="üìà <b>–¢–æ–ø 5 —Ä–æ—Å—Ç 24—á:</b>",
        top_loss="üìâ <b>–¢–æ–ø 5 –ø–∞–¥–µ–Ω–∏–µ 24—á:</b>"
    ),
    "uk": dict(
        start=(
            "üî• Crypto Bot ‚Äî –ø–æ–º—ñ—á–Ω–∏–∫ –ø–æ –∫—Ä–∏–ø—Ç–æ—Ä–∏–Ω–∫—É\n\n"
            "üìå –®–≤–∏–¥–∫—ñ –∫–æ–º–∞–Ω–¥–∏\n"
            "‚Ä¢ /price ‚Äî –º–∏—Ç—Ç—î–≤–æ: BTC ETH SOL\n"
            "‚Ä¢ /price btc ada doge ‚Äî —Ü—ñ–Ω–∏ –±—É–¥—å-—è–∫–∏—Ö –º–æ–Ω–µ—Ç\n"
            "‚Ä¢ /top ‚Äî —Ç–æ–ø 5 –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è / –ø–∞–¥—ñ–Ω–Ω—è (24–≥)\n\n"
            "‚≠ê –û–±—Ä–∞–Ω–µ\n"
            "‚Ä¢ /fav ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫\n"
            "‚Ä¢ /fav_add btc ada ‚Äî –¥–æ–¥–∞—Ç–∏\n"
            "‚Ä¢ /fav_remove btc ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏\n\n"
            "üîó –°–µ—Ä–≤—ñ—Å–∏\n"
            "‚Ä¢ <a href=\"https://www.binance.com/activity/referral-entry/CPA?ref=CPA_00POHWMMJK\">Binance</a>\n"
            "‚Ä¢ <a href=\"https://www.bybit.com/invite?ref=A5Y25JQ\">Bybit</a>\n"
            "‚Ä¢ <a href=\"https://promote.mexc.com/r/XzfzE6vM\">MEXC</a>\n"
            "‚Ä¢ <a href=\"https://bingx.com/invite/XQIWQZ/\">BingX</a>\n"
            "‚Ä¢ <a href=\"https://okx.com/join/33545594\">OKX</a>"
        ),
        hdr="üí∞ –¶—ñ–Ω–∏:", none="‚ùå –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö",
        fav_empty="‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π.",
        top_gain="üìà <b>–¢–æ–ø 5 –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è 24–≥:</b>",
        top_loss="üìâ <b>–¢–æ–ø 5 –ø–∞–¥—ñ–Ω–Ω—è 24–≥:</b>"
    ),
    "en": dict(
        start=(
            "üî• Crypto Bot ‚Äî crypto market assistant\n\n"
            "üìå Quick commands\n"
            "‚Ä¢ /price ‚Äî instantly: BTC ETH SOL\n"
            "‚Ä¢ /price btc ada doge ‚Äî prices of any coins\n"
            "‚Ä¢ /top ‚Äî top 5 gain / loss (24h)\n\n"
            "‚≠ê Favorites\n"
            "‚Ä¢ /fav ‚Äî show list\n"
            "‚Ä¢ /fav_add btc ada ‚Äî add\n"
            "‚Ä¢ /fav_remove btc ‚Äî remove\n\n"
            "üîó Services\n"
            "‚Ä¢ <a href=\"https://www.binance.com/activity/referral-entry/CPA?ref=CPA_00POHWMMJK\">Binance</a>\n"
            "‚Ä¢ <a href=\"https://www.bybit.com/invite?ref=A5Y25JQ\">Bybit</a>\n"
            "‚Ä¢ <a href=\"https://promote.mexc.com/r/XzfzE6vM\">MEXC</a>\n"
            "‚Ä¢ <a href=\"https://bingx.com/invite/XQIWQZ/\">BingX</a>\n"
            "‚Ä¢ <a href=\"https://okx.com/join/33545594\">OKX</a>"
        ),
        hdr="üí∞ Prices:", none="‚ùå no data",
        fav_empty="‚ö†Ô∏è Favorites empty.",
        top_gain="üìà <b>Top 5 gain 24h:</b>",
        top_loss="üìâ <b>Top 5 loss 24h:</b>"
    )
}

def L(u): return TXT.get((u.effective_user.language_code or "en")[:2], TXT["en"])

# ---------- –∏–∑–±—Ä–∞–Ω–Ω–æ–µ ----------
favs = {}

# ---------- handlers ----------
async def start_cmd(u:Update,_):
    await u.message.reply_text(L(u)["start"],parse_mode="HTML",disable_web_page_preview=True)

async def price_cmd(u:Update,c:ContextTypes.DEFAULT_TYPE):
    t=L(u); coins=c.args or ["BTC","ETH","SOL"]; data=await unified_24h()
    out=[t["hdr"]]
    for coin in coins:
        if coin.upper() in data:
            price,_=data[coin.upper()]
            out.append(f"{coin.upper():<6}: ${fmt_price(price)}")
        else:
            out.append(f"{coin.upper():<6}: {t['none']}")
    await u.message.reply_text("\n".join(out))

async def top_cmd(u:Update,_):
    t=L(u); data=await unified_24h()
    gain=sorted(data.items(),key=lambda x:x[1][1],reverse=True)[:5]
    loss=sorted(data.items(),key=lambda x:x[1][1])[:5]
    lines=[t["top_gain"]]
    for n,(p,ch) in gain: lines.append(f"{n:<6} {pct(ch):>7}  ${fmt_price(p)}")
    lines.append("\n"+t["top_loss"])
    for n,(p,ch) in loss: lines.append(f"{n:<6} {pct(ch):>7}  ${fmt_price(p)}")
    await u.message.reply_text("\n".join(lines),parse_mode="HTML")

async def fav_add(u:Update,c):
    if not c.args: return await u.message.reply_text("Usage: /fav_add btc ada")
    favs.setdefault(u.effective_user.id,set()).update(a.lower() for a in c.args)
    await u.message.reply_text("‚úÖ added")

async def fav_remove(u:Update,c):
    if not c.args: return await u.message.reply_text("Usage: /fav_remove btc ada")
    s=favs.setdefault(u.effective_user.id,set())
    for coin in c.args: s.discard(coin.lower())
    await u.message.reply_text("‚úÖ updated")

async def fav_cmd(u:Update,_):
    t=L(u); s=favs.get(u.effective_user.id,set())
    if not s: return await u.message.reply_text(t["fav_empty"])
    data=await unified_24h(); lines=["‚≠ê"]
    for coin in sorted(s):
        if coin.upper() in data:
            lines.append(f"{coin.upper():<6}: ${fmt_price(data[coin.upper()][0])}")
        else:
            lines.append(f"{coin.upper():<6}: {t['none']}")
    await u.message.reply_text("\n".join(lines))

# ---------- main ----------
if __name__=="__main__":
    app=ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start",start_cmd))
    app.add_handler(CommandHandler("price",price_cmd))
    app.add_handler(CommandHandler("top",top_cmd))
    app.add_handler(CommandHandler("fav_add",fav_add))
    app.add_handler(CommandHandler("fav_remove",fav_remove))
    app.add_handler(CommandHandler("fav",fav_cmd))
    print("Bot running ‚Ä¶")
    app.run_polling()
